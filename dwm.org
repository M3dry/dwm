#+TITLE: Dwm
#+author: M3dry
#+property: header-args :C :tangle config.h :main no
#+exclude_tags: toc_4

* Table of contents :toc_4:
- [[#variables][Variables]]
  - [[#tab-bar][Tab bar]]
  - [[#bar][Bar]]
    - [[#showbar][Showbar]]
    - [[#bar-position][Bar position]]
    - [[#status-padding][Status padding]]
    - [[#bar-padding][Bar padding]]
    - [[#bar-height][Bar height]]
    - [[#systray][Systray]]
    - [[#vacant-tags][Vacant tags]]
    - [[#underline][Underline]]
      - [[#underline-size][Underline size]]
      - [[#enable-underline][Enable underline]]
  - [[#gaps][Gaps]]
  - [[#swallow-floating][Swallow floating]]
  - [[#window-border][Window border]]
  - [[#snap][Snap]]
  - [[#start-on-tag][Start on tag]]
  - [[#decoration-hints][Decoration hints]]
  - [[#focus-on-wheel][Focus on wheel]]
  - [[#fonts][Fonts]]
- [[#colors][Colors]]
  - [[#color-variables][Color variables]]
    - [[#tag-colors][Tag colors]]
      - [[#inverted][Inverted]]
    - [[#special-window-border-colors][Special window border colors]]
    - [[#occupied-tag-colors][Occupied tag colors]]
      - [[#inverted-1][Inverted]]
    - [[#status-colors][Status colors]]
      - [[#inverted-2][Inverted]]
    - [[#ltsymbol-colors][Ltsymbol colors]]
    - [[#tab-bar-colors][Tab bar colors]]
    - [[#client-indicator-colors][Client indicator colors]]
    - [[#client-number-colors][Client number colors]]
    - [[#systray-1][Systray]]
    - [[#layout-border-colors][Layout border colors]]
  - [[#colors-array][Colors array]]
- [[#tag][Tag]]
  - [[#number-of-tags][Number of tags]]
  - [[#master-window-name][Master window name]]
  - [[#default-applications][Default applications]]
- [[#scratchpads][Scratchpads]]
- [[#rules][Rules]]
  - [[#client-rules][Client rules]]
  - [[#tag-rules][Tag rules]]
- [[#layouts][Layouts]]
  - [[#layout-modifiers][Layout modifiers]]
  - [[#layout-definitions][Layout definitions]]
- [[#special-keys][Special keys]]
- [[#tag-functions][Tag functions]]
- [[#keybinds][Keybinds]]
- [[#mouse-bindings][Mouse bindings]]
- [[#dwmc][dwmc]]

* Variables
** Tab bar
#+begin_src C
enum showtab_modes { showtab_never, showtab_auto, showtab_nmodes, showtab_always};
static const int showtab                   = showtab_auto; /* Default tab bar show mode */
static const int toptab                    = 0;            /* False means bottom tab bar */
#+end_src
** Bar
*** Showbar
#+begin_src C
static const int showbar                   = 1;   /* 0 means no bar */
#+end_src
*** Bar position
#+begin_src C
static const int topbar                    = 1;   /* 0 means bottom bar */
#+end_src
*** Status padding
#+begin_src C
static const int horizpadbar               = 0;   /* horizontal padding for statusbar */
static const int vertpadbar                = 0;   /* vertical padding for statusbar */
#+end_src
*** Bar padding
#+begin_src C
static const int vertpad                   = 0;                           /* vertical padding of bar */
static const int sidepad                   = 0;                           /* horizontal padding of bar */
static const int vertpadtoggle             = vertpad ? vertpad : 10;      /* vertical padding of bar that's toggleable */
static const int sidepadtoggle             = sidepad ? sidepad : 10;      /* horizontal padding of bar that's toggleable */
#+end_src
*** Bar height
#+begin_src C
static const int user_bh                   = 24;  /* 0 means that dwm will calculate bar height, >= 1 means dwm will user_bh as bar height */
#+end_src
*** Systray
#+begin_src C
static const unsigned int systraypinning   = 1;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayspacing   = 2;   /* systray spacing */
static const int systraypinningfailfirst   = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
static const int showsystray               = 1;   /* 0 means no systray */
#+end_src
*** Vacant tags
#+begin_src C
/* static       unsigned int vacantonstart    = 1;   /\* 0 means no vacant tags *\/ */
#+end_src
*** Underline
**** Underline size
#+begin_src C
static const unsigned int ulinepad         = 6;   /* horizontal padding between the underline and tag */
static const unsigned int ulinestroke      = 2;   /* thickness / height of the underline */
static const unsigned int ulinevoffset     = 0;   /* how far above the bottom of the bar the line should appear */
#+end_src
**** Enable underline
#+begin_src C
static const unsigned int underlinetags    = 1;   /* 0 means no underline */
static const unsigned int underlinevacant  = 1;   /* 0 means no underline for vacant tags */
#+end_src
** Gaps
#+begin_src C
static const unsigned int gappih           = vertpad || sidepad ? vertpadtoggle : 0;  /* horiz inner gap between windows */
static const unsigned int gappiv           = vertpad || sidepad ? vertpadtoggle : 0;  /* vert inner gap between windows */
static const unsigned int gappoh           = vertpad            ? sidepadtoggle : 0;  /* horiz outer gap between windows and screen edge */
static const unsigned int gappov           = sidepad            ? sidepadtoggle : 0;  /* vert outer gap between windows and screen edge */
/* static       unsigned int smartgaps        = vertpad || sidepad ? 0 : 1;   /\* 1 means no outer gap when there is only one window one window *\/ */
static       unsigned int padding          = vertpad || sidepad ? 1 : 0;
#+end_src
** Swallow floating
#+begin_src C
static const int swallowfloating           = 1;   /* 1 means swallow floating windows by default */
#+end_src
** Window border
#+begin_src C
static unsigned int borderpx         = 1;   /* border pixel of windows */
#+end_src
** Snap
#+begin_src C
static const unsigned int snap             = 0;  /* snap pixel */
#+end_src
** Start on tag
#+begin_src C
static const int startontag                = 1;   /* 0 means no tag active on start */
#+end_src
** Decoration hints
#+begin_src C
static const int decorhints                = 1;   /* 1 means respect decoration hints */
#+end_src
** Focus on wheel
#+begin_src C
static const int focusonwheel              = 0;
#+end_src
** Fonts
#+begin_src C
static const char *fonts[] = { "Operator Mono SSm Lig Nerd Font:size=12:antialias=true:autohint=true" };
#+end_src
* Colors
** Color variables
*** Tag colors
#+begin_src C
static const char normfg[]                = "#4E5579";
static const char selfg[]                 = "#5fafff";
static const char normbg[]                = "#1E1C31";
static const char selbg[]                 = "#1E1C31";
#+end_src
**** Inverted
#+begin_src C
static const char invnormbg[]             = "#f0f0f0";
static const char invnormfg[]             = "#000000";
static const char invselfg[]              = "#5fafff";
static const char invselbg[]              = "#f0f0f0";
#+end_src
*** Special window border colors
#+begin_src C
static const char normfloatwinborder[]    = "#000000";
static const char selfloatwinborder[]     = "#ffffff";
static const char normstickyborder[]      = "#000000";
static const char selstickyborder[]       = "#98be65";
static const char normstickyfloatborder[] = "#000000";
static const char selstickyfloatborder[]  = "#8acc35";
static const char normfakefullscr[]       = "#408ab2";
static const char selfakefullscr[]        = "#b869e5";
static const char normfakefullscrfloat[]  = "#289fe0";
static const char selfakefullscrfloat[]   = "#9b1be5";
#+end_src
*** Occupied tag colors
#+begin_src C
static const char occupiedfg[]            = "#7986E7";
static const char occupiedbg[]            = "#1E1C31";
#+end_src
**** Inverted
#+begin_src C
static const char ocinvfg[]               = "#7986E7";
static const char ocinvbg[]               = "#f0f0f0";
#+end_src
*** Status colors
#+begin_src C
static const char statusfg[]              = "#7986E7";
static const char statusbg[]              = "#1e1c31";
#+end_src
**** Inverted
#+begin_src C
static const char invstatusbg[]           = "#f0f0f0";
#+end_src
*** Ltsymbol colors
#+begin_src C
static const char ltsymbolfg[]            = "#1e1c31";
static const char ltsymbolbg[]            = "#ff5370";
#+end_src
*** Tab bar colors
#+begin_src C
static const char normtabfg[]             = "#4E5579";
static const char seltabfg[]              = "#7986E7";
static const char normtabbg[]             = "#1E1C31";
static const char seltabbg[]              = "#1E1C31";
#+end_src
*** Client indicator colors
#+begin_src C
static const char vacindfg[]          = "#4e5579";
static const char indfg[]             = "#7986E7";
#+end_src
*** Client number colors
#+begin_src C
static const char numfg[]                 = "#7986e7";
static const char numbg[]                 = "#1e1c31";
#+end_src
*** Systray
#+begin_src C
static const char systraybg[]             = "#1E1C31";
#+end_src
*** Layout border colors
#+begin_src C
static const char normtileborder[]        = "#1E1C31";
static const char normfibonacciborder[]   = "#1E1C31";
static const char normfloatborder[]       = "#1E1C31";
static const char normdeckborder[]        = "#1E1C31";
static const char normnrowgridborder[]    = "#1E1C31";
static const char normbstackborder[]      = "#1E1C31";
static const char normcenmasterborder[]   = "#1E1C31";
static const char normmonocleborder[]     = "#1E1C31";
static const char normgaplessgridborder[] = "#1E1C31";
static const char seltileborder[]         = "#5fafff";
static const char selfibonacciborder[]    = "#5fafff";
static const char selfloatborder[]        = "#5fafff";
static const char seldeckborder[]         = "#5fafff";
static const char selnrowgridborder[]     = "#5fafff";
static const char selbstackborder[]       = "#5fafff";
static const char selcenmasterborder[]    = "#5fafff";
static const char selmonocleborder[]      = "#5fafff";
static const char selgaplessgridborder[]  = "#5fafff";
#+end_src
** Colors array
#+begin_src C
static const char *colors[][10]  = {
    /* Tags/borders       fg            bg      float               sticky            sticky + float         fakefullscreen   fakefullscreen + float */
    [SchemeNorm]        = { normfg,     normbg, normfloatwinborder, normstickyborder, normstickyfloatborder, normfakefullscr, normfakefullscrfloat },
    [SchemeSel]         = { selfg,      selbg,  selfloatwinborder,  selstickyborder,  selstickyfloatborder,  selfakefullscr,  selfakefullscrfloat },
    [SchemeOccupied]    = { occupiedfg, occupiedbg },
    [SchemeOccupiedInv] = { ocinvfg,    ocinvbg },
    [SchemeStatus]      = { statusfg,   statusbg, invstatusbg },
    [SchemeLtsymbol]    = { ltsymbolfg, ltsymbolbg },
    [SchemeTabNorm]     = { normtabfg,  normtabbg },
    [SchemeTabSel]      = { seltabfg,   seltabbg},
    [SchemeClientVac]   = { vacindfg },
    [SchemeClient]      = { indfg },
    [SchemeClientNum]   = { numfg,      numbg },
    [SchemeSystray]     = {             systraybg },
    [SchemeInvMon]      = { invnormfg,  invnormbg },
    [SchemeInvMonSel]   = { invselfg,   invselbg },
    /* Win borders          tile            fibonacci            float            deck            nrowgrid            bstack            centeredmaster       monocle            gaplessgrid */
    [SchemeNormLayout]  = { normtileborder, normfibonacciborder, normfloatborder, normdeckborder, normnrowgridborder, normbstackborder, normcenmasterborder, normmonocleborder, normgaplessgridborder },
    [SchemeSelLayout]   = { seltileborder,  selfibonacciborder,  selfloatborder,  seldeckborder,  selnrowgridborder,  selbstackborder,  selcenmasterborder,  selmonocleborder,  selgaplessgridborder },
};
#+end_src
* Tag
** Number of tags
#+begin_src C
static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
#+end_src
** Master window name
#+begin_src C
static const char ptagf[] = "[%s:%s]"; /* format of a tag label */
static const char etagf[] = "{%s}";    /* format of an empty tag */
static const int lcaselbl = 0;         /* 1 means make tag label lowercase */
#+end_src
** Default applications
#+begin_src C
static const char *defaulttagapps[] = { "firefox", NULL, NULL, "chromium", NULL, NULL, NULL, "discord", "gimp" };
#+end_src
* Scratchpads
#+begin_src C
static const char *scpclean[] = {"u", NULL};
static const char *scpcmus[]  = {"i", "st", "-c", "scpcmus",  "-t", "cmusSCP", "-e", "cmus", NULL};
static const char *scpcal[]   = {"y", "qalculate-gtk", "--title", "calSCP", NULL};
#+end_src
* Rules
** Client rules
    xprop(1):
     WM_CLASS(STRING) = instance, class
     WM_NAME(STRING) = title
     _NET_WM_WINDOW_TYPE(ATOM) = wintype
#+begin_src C
#define WTYPE "_NET_WM_WINDOW_TYPE_"
static const Rule rules[] = {
    /* class      instance    title          wintype tags mask switchtotag isfloating iscentered ispermanent isterminal noswallow monitor scratch key */
    /* Scratchpads */
    { "scpclean", NULL,       NULL,          NULL,   0,        0,          0,         0,         0,          0,         0,        -1, 'u' },
    { "scpcmus",  NULL,       NULL,          NULL,   0,        0,          0,         0,         1,          0,         0,        -1, 'i' },
    { NULL,       NULL,       "calSCP",      NULL,   0,        0,          1,         1,         0,          0,         0,        -1, 'y' },
    /* Swallow */
    { "St",       NULL,       NULL,          NULL,   0,        0,          0,         0,         0,          1,         0,        -1, 0 },
    { "Alacritty",NULL,       NULL,          NULL,   0,        0,          0,         0,         0,          1,         0,        -1, 0 },
    { "XTerm",    NULL,       NULL,          NULL,   0,        0,          0,         0,         0,          1,         0,        -1, 0 },
    { "Emacs",    NULL,       NULL,          NULL,   0,        0,          0,         0,         0,          1,         0,        -1, 0 },
    /* Noswallow */
    { NULL,       NULL,       "Event Tester",NULL,   0,        0,          0,         0,         0,          0,         1,        -1, 0 },
    { "Xephyr",   NULL,       NULL,          NULL,   0,        0,          1,         1,         0,          0,         1,        -1, 0 },
    { "Gimp",     NULL,       NULL,          NULL,   1 << 8,   3,          1,         1,         0,          0,         1,        -1, 0 },
    { NULL,       NULL,       "glxgears",    NULL,   0,        0,          1,         0,         0,          0,         1,        -1, 0 },
    /* General windows */
    { NULL,       "discord",  NULL,          NULL,   1 << 7,   0,          0,         0,         0,          0,         0,        -1, 0 },
    { NULL,       "Navigator",NULL,          NULL,   1,        0,          0,         0,         1,          0,         1,        -1, 0 },
    { NULL,       "nyxt",     NULL,          NULL,   1,        0,          0,         0,         1,          0,         1,        -1, 0 },
    { NULL,       "chromium", NULL,          NULL,   1 << 3,   0,          0,         0,         1,          0,         1,        -1, 0 },
    /* Wintype */
    { NULL,       NULL,       NULL, WTYPE "DIALOG",  0,        0,          1,         1,         0,          0,         0,        -1, 0 },
    { NULL,       NULL,       NULL, WTYPE "UTILITY", 0,        0,          1,         1,         0,          0,         0,        -1, 0 },
    { NULL,       NULL,       NULL, WTYPE "TOOLBAR", 0,        0,          1,         1,         0,          0,         0,        -1, 0 },
    { NULL,       NULL,       NULL, WTYPE "SPLASH",  0,        0,          1,         1,         0,          0,         0,        -1, 0 },
};
#+end_src
** Tag rules
#+begin_src C
static const TagRule tagrules[9] = {
    /* showbar topbar vacant layout gapih gapiv gapoh gapov smartgaps vpad spad borderpx nmaster mfact */
    {  1,      1,     1,     0,     0,    0,    0,    0,    1,        0,   0,   1,       1,      0.5 },
    {  1,      1,     1,     0,     0,    0,    0,    0,    1,        0,   0,   1,       1,      0.5 },
    {  1,      1,     1,     0,     0,    0,    0,    0,    1,        0,   0,   1,       1,      0.5 },
    {  1,      1,     1,     0,     0,    0,    0,    0,    1,        0,   0,   1,       1,      0.5 },
    {  1,      1,     1,     0,     0,    0,    0,    0,    1,        0,   0,   1,       1,      0.5 },
    {  1,      1,     1,     0,     0,    0,    0,    0,    1,        0,   0,   1,       1,      0.5 },
    {  1,      1,     1,     0,     0,    0,    0,    0,    1,        0,   0,   1,       1,      0.5 },
    {  1,      1,     1,     0,     0,    0,    0,    0,    1,        0,   0,   1,       1,      0.5 },
    {  1,      1,     1,     0,     0,    0,    0,    0,    1,        0,   0,   1,       1,      0.5 },
};
#+end_src
* Layouts
** Layout modifiers
+ mfact defines how wide master stack is
+ resizehints defines if dwm will resize window even if its too small
+ nmaster defines how many windows are in master stack
+ attachbelow defines if windows should attach bellow selected window
+ force_vsplit forces two clients to always slpit vertically
#+begin_src C
static const float mfact     = 0.5;
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
static const int nmaster     = 1;
static const int attachbelow = 1;

#define FORCE_VSPLIT 1
#include "vanitygaps.c"
#+end_src
** Layout definitions
+ avaible layouts:
  - bstack
  - bstackhoriz
  - centeredmaster
  - centeredfloatingmaster
  - deck
  - dwindle
  - fibonacci
  - grid
  - nrowgrid
  - spiral
  - tile
#+begin_src C
static const Layout layouts[] = {
    /* symbol     arrange function */
    { "tile",           tile },    /* first entry is default */
    { "spiral",         spiral },
    { "float",          NULL },    /* no layout function means floating behavior */
    { "deck",           deck },
    { "nrowgrid",       nrowgrid },
    { "bstack",         bstack },
    { "centeredmaster", centeredmaster },
    { "monocle",        monocle },
    { "grid",           gaplessgrid },
    { NULL,             NULL },
};
#+end_src
* Special keys
- Mod4Mask = Modkey
- Mod1Mask = Alt
- ShiftMask = Shift
- ControlMask = Control
#+begin_src C
#include <X11/XF86keysym.h>

#define M Mod4Mask
#define A Mod1Mask
#define S ShiftMask
#define C ControlMask
#+end_src
* Tag functions
#+begin_src C
#define TAGKEYS(KEY,TAG) \
    { A,       -1,        KEY,   comboview,    {.ui = 1 << TAG} }, \
    { C,       -1,        KEY,   toggleview,   {.ui = 1 << TAG} }, \
    { M,       -1,        KEY,   toggletag,    {.ui = 1 << TAG} }, \
    { A|S,     -1,        KEY,   combotag,     {.ui = 1 << TAG} }, \
    { A|C,     -1,        KEY,   tagwith,      {.ui = 1 << TAG} }, \
    { M|S,     -1,        KEY,   swaptags,     {.ui = 1 << TAG} }, \
    { A|C,     XK_comma,  KEY,   focusnextmon, {.ui = 1 << TAG} }, \
    { A|C,     XK_period, KEY,   focusprevmon, {.ui = 1 << TAG} }, \
    { A|C|S,   XK_comma,  KEY,   tagnextmon,   {.ui = 1 << TAG} }, \
    { A|C|S,   XK_period, KEY,   tagprevmon,   {.ui = 1 << TAG} }, \
    { A|C,     XK_q,      KEY,   killontag,    {.ui = 1 << TAG} },
#+end_src
* Keybinds
#+name: binds
| mod   | key                     | multi key | function             | args                                                                  |
|-------+-------------------------+-----------+----------------------+-----------------------------------------------------------------------|
| A     | XK_Return               |        -1 | spawn                | SHCMD("$TERMINAL")                                                    |
| A:S   | XK_c                    |        -1 | spawn                | SHCMD("$TERMINAL htop")                                               |
| A:S   | XK_z                    |        -1 | spawn                | SHCMD("playerctl play-pause")                                         |
| A:S   | XK_e                    |        -1 | spawn                | SHCMD("$TERMINAL nvim")                                               |
| A     | XK_e                    |      XK_e | spawn                | SHCMD("emacsclient -c")                                               |
| A     | XK_c                    |      XK_e | spawn                | SHCMD("emacsclient -c -e '(ibuffer)'")                                |
| A     | XK_d                    |      XK_e | spawn                | SHCMD("emacsclient -c -e '(dired nil)'")                              |
| A     | XK_f                    |      XK_e | spawn                | SHCMD("emacsclient -c -e '(elfeed)'")                                 |
| A     | XK_s                    |        -1 | spawn                | SHCMD("~/.emacs.d/bin/doom everywhere")                               |
| A     | XK_w                    |        -1 | spawn                | SHCMD("xdo activate -N firefox :: firefox")                           |
| M     | XK_w                    |        -1 | spawn                | SHCMD("xdo activate -N Chromium :: chromium")                         |
| A:C   | XK_KP_Down              |        -1 | spawn                | SHCMD("xkill")                                                        |
| A:C   | XK_d                    |        -1 | spawn                | SHCMD("discord")                                                      |
| A:C   | XK_u                    |        -1 | spawn                | SHCMD("import my-stuff/Pictures/snips/$(date +'%F-%T').png")          |
| A     | XK_p                    |        -1 | spawn                | SHCMD("pcmanfm")                                                      |
| A:C   | XK_m                    |        -1 | spawn                | SHCMD("multimc")                                                      |
| A:M:C | XK_l                    |        -1 | spawn                | SHCMD("slock")                                                        |
| M     | XK_g                    |        -1 | spawn                | SHCMD("xmenu.sh -p 0x0")                                              |
| A     | XK_r                    |        -1 | spawndefault         | {0}                                                                   |
| A:S   | XK_Return               |        -1 | spawn                | SHCMD("dmenu_run_history -l 5 -g 10 -p 'Run'")                        |
| A     | XK_c                    |        -1 | spawn                | SHCMD("volume-script")                                                |
| A:C   | XK_Return               |        -1 | spawn                | SHCMD("Booky 'emacsclient -c -a emacs' '><' 'Cconfig'")               |
| A:S   | XK_w                    |        -1 | spawn                | SHCMD("Booky 'firefox' '_' 'Bconfig'")                                |
| A     | XK_z                    |        -1 | spawn                | SHCMD("music-changer cmus")                                           |
| A:S   | XK_s                    |      XK_d | spawn                | SHCMD("switch")                                                       |
| A:S   | XK_e                    |      XK_d | spawn                | SHCMD("emoji-script")                                                 |
| A:S   | XK_c                    |      XK_d | spawn                | SHCMD("calc")                                                         |
| A:S   | XK_p                    |      XK_d | spawn                | SHCMD("passmenu2 -F -p 'Passwords'")                                  |
| A:S   | XK_v                    |      XK_d | spawn                | SHCMD("manview")                                                      |
| A:S   | XK_q                    |      XK_d | spawn                | SHCMD("shut")                                                         |
| 0     | XF86XK_AudioPrev        |        -1 | spawn                | SHCMD("playerctl --player cmus previous")                             |
| 0     | XF86XK_AudioNext        |        -1 | spawn                | SHCMD("playerctl --player cmus next")                                 |
| 0     | XF86XK_AudioPlay        |        -1 | spawn                | SHCMD("playerctl --player cmus play-pause")                           |
| 0     | XF86XK_AudioLowerVolume |        -1 | spawn                | SHCMD("pamixer --allow-boost -d 1 ; killall dwmStatus ; dwmStatus &") |
| 0     | XF86XK_AudioRaiseVolume |        -1 | spawn                | SHCMD("pamixer --allow-boost -i 1 ; killall dwmStatus ; dwmStatus &") |
| A     | XK_q                    |        -1 | killclient           | {0}                                                                   |
| A:C:S | XK_x                    |        -1 | killpermanent        | {0}                                                                   |
| A:S   | XK_q                    |        -1 | killunsel            | {0}                                                                   |
| M     | XK_v                    |        -1 | togglevacant         | {0}                                                                   |
| A:C   | XK_v                    |        -1 | toggletopbar         | {0}                                                                   |
| M:S   | XK_v                    |        -1 | togglepadding        | {0}                                                                   |
| A     | XK_n                    |        -1 | togglebar            | {0}                                                                   |
| A:S   | XK_h                    |        -1 | setmfact             | { .f = -0.05 }                                                        |
| A:S   | XK_l                    |        -1 | setmfact             | { .f = +0.05 }                                                        |
| M:C   | XK_u                    |        -1 | setmfact             | { .f = mfact + 1 }                                                    |
| A:S   | XK_j                    |        -1 | setcfact             | { .f = +0.25 }                                                        |
| A:S   | XK_k                    |        -1 | setcfact             | { .f = -0.25 }                                                        |
| M:C:S | XK_u                    |        -1 | setcfact             | {0}                                                                   |
| A     | XK_bracketleft          |        -1 | incnmaster           | { .i = +1 }                                                           |
| A     | XK_bracketright         |        -1 | incnmaster           | { .i = -1 }                                                           |
| M     | XK_space                |        -1 | focusmaster          | {0}                                                                   |
| A:C   | XK_space                |        -1 | switchcol            | {0}                                                                   |
| A     | XK_h                    |        -1 | focusdir             | { .i = 0 }                                                            |
| A     | XK_l                    |        -1 | focusdir             | { .i = 1 }                                                            |
| A     | XK_k                    |        -1 | focusdir             | { .i = 2 }                                                            |
| A     | XK_j                    |        -1 | focusdir             | { .i = 3 }                                                            |
| M:S   | XK_j                    |        -1 | focusstack           | { .i = +1 }                                                           |
| M:S   | XK_k                    |        -1 | focusstack           | { .i = -1 }                                                           |
| M:A   | XK_h                    |        -1 | inplacerotate        | { .i = +2 }                                                           |
| M:A   | XK_l                    |        -1 | inplacerotate        | { .i = -2 }                                                           |
| A     | XK_t                    |        -1 | setlayout            | { .v = &layouts[0] }                                                  |
| A     | XK_v                    |        -1 | setlayout            | { .v = &layouts[1] }                                                  |
| A:S   | XK_f                    |        -1 | setlayout            | { .v = &layouts[2] }                                                  |
| A     | XK_d                    |        -1 | setlayout            | { .v = &layouts[3] }                                                  |
| A     | XK_g                    |        -1 | setlayout            | { .v = &layouts[4] }                                                  |
| A     | XK_b                    |        -1 | setlayout            | { .v = &layouts[5] }                                                  |
| A:S   | XK_m                    |        -1 | setlayout            | { .v = &layouts[6] }                                                  |
| A     | XK_m                    |        -1 | setlayout            | { .v = &layouts[7] }                                                  |
| A:S   | XK_g                    |        -1 | setlayout            | { .v = &layouts[8] }                                                  |
| A:S   | XK_t                    |        -1 | tabmode              | {-1}                                                                  |
| A:C   | XK_i                    |        -1 | cyclelayout          | { .i = -1 }                                                           |
| A:C   | XK_p                    |        -1 | cyclelayout          | { .i = +1 }                                                           |
| A     | XK_Tab                  |        -1 | goback               | {0}                                                                   |
| A:S   | XK_n                    |        -1 | shiftviewclients     | { .i = +1 }                                                           |
| A:S   | XK_p                    |        -1 | shiftviewclients     | { .i = -1 }                                                           |
| A:S   | XK_a                    |        -1 | winview              | {0}                                                                   |
| A     | XK_semicolon            |        -1 | zoom                 | {0}                                                                   |
| A:S   | XK_v                    |        -1 | transfer             | {0}                                                                   |
| M:C   | XK_j                    |        -1 | pushdown             | {0}                                                                   |
| M:C   | XK_k                    |        -1 | pushup               | {0}                                                                   |
| A:C   | XK_r                    |        -1 | togglefloating       | {0}                                                                   |
| A:S   | XK_space                |        -1 | unfloatvisible       | {0}                                                                   |
| A:S   | XK_s                    |        -1 | togglesticky         | {0}                                                                   |
| A     | XK_f                    |        -1 | togglefullscr        | {0}                                                                   |
| A:C   | XK_f                    |        -1 | togglefakefullscreen | {0}                                                                   |
| A     | XK_u                    |        -1 | togglescratch        | { .v = scpclean }                                                     |
| A     | XK_i                    |        -1 | togglescratch        | { .v = scpcmus }                                                      |
| A     | XK_y                    |        -1 | togglescratch        | { .v = scpcal }                                                       |
| A:M   | XK_u                    |        -1 | removescratch        | { .v = scpclean }                                                     |
| A:M   | XK_i                    |        -1 | removescratch        | { .v = scpcmus }                                                      |
| A:M   | XK_y                    |        -1 | removescratch        | { .v = scpcal }                                                       |
| A:S   | XK_u                    |        -1 | setscratch           | { .v = scpclean }                                                     |
| A:S   | XK_i                    |        -1 | setscratch           | { .v = scpcmus }                                                      |
| A:S   | XK_y                    |        -1 | setscratch           | { .v = scpcal }                                                       |
| A     | XK_comma                |        -1 | focusmon             | { .i = -1 }                                                           |
| A     | XK_period               |        -1 | focusmon             | { .i = +1 }                                                           |
| A:S   | XK_comma                |        -1 | tagmon               | { .i = -1 }                                                           |
| A:S   | XK_period               |        -1 | tagmon               | { .i = +1 }                                                           |
| A:S   | XK_equal                |        -1 | incrgaps             | { .i = +1 }                                                           |
| A:S   | XK_minus                |        -1 | incrgaps             | { .i = -1 }                                                           |
| A:S   | XK_0                    |        -1 | defaultgaps          | {0}                                                                   |
| A:C   | XK_0                    |        -1 | togglegaps           | {0}                                                                   |
| A:C   | XK_equal                |        -1 | setborderpx          | { .i = +1 }                                                           |
| A:C   | XK_minus                |        -1 | setborderpx          | { .i = -1 }                                                           |
| M     | XK_0                    |        -1 | setborderpx          | { .i = 0 }                                                            |
| M:S   | XK_Escape               |        -1 | quit                 | {0}                                                                   |
| A:C:S | XK_q                    |        -1 | quit                 | {1}                                                                   |

#+begin_src sh :tangle no :var keys=binds :results output :wrap "src C"
echo "#define SHCMD(cmd) { .v = (const char*[]){ \"/bin/sh\", \"-c\", cmd, NULL } }\n\nstatic Key keys[] = {"
echo $keys | sed "s/)\ /)\n/g ; s/}\ /}\n/g" | sed "s/\ /^/ ; s/\ /^/ ; s/\ /^/ ; s/\ /^/" | awk -F'^' '{ gsub(":", "|", $0) ; print "{"$1","$3","$2","$4","$5"}," }'
echo "
TAGKEYS(                XK_1,                                  0)
TAGKEYS(                XK_2,                                  1)
TAGKEYS(                XK_3,                                  2)
TAGKEYS(                XK_4,                                  3)
TAGKEYS(                XK_5,                                  4)
TAGKEYS(                XK_6,                                  5)
TAGKEYS(                XK_7,                                  6)
TAGKEYS(                XK_8,                                  7)
TAGKEYS(                XK_9,                                  8)};"
#+end_src

#+RESULTS:
#+begin_src C
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

static Key keys[] = {
{A,-1,XK_Return,spawn,SHCMD("$TERMINAL")},
{A|S,-1,XK_c,spawn,SHCMD("$TERMINAL htop")},
{A|S,-1,XK_z,spawn,SHCMD("playerctl play-pause")},
{A|S,-1,XK_e,spawn,SHCMD("$TERMINAL nvim")},
{A,XK_e,XK_e,spawn,SHCMD("emacsclient -c")},
{A,XK_e,XK_c,spawn,SHCMD("emacsclient -c -e '(ibuffer)'")},
{A,XK_e,XK_d,spawn,SHCMD("emacsclient -c -e '(dired nil)'")},
{A,XK_e,XK_f,spawn,SHCMD("emacsclient -c -e '(elfeed)'")},
{A,-1,XK_s,spawn,SHCMD("~/.emacs.d/bin/doom everywhere")},
{A,-1,XK_w,spawn,SHCMD("xdo activate -N firefox || firefox")},
{M,-1,XK_w,spawn,SHCMD("xdo activate -N Chromium || chromium")},
{A|C,-1,XK_KP_Down,spawn,SHCMD("xkill")},
{A|C,-1,XK_d,spawn,SHCMD("discord")},
{A|C,-1,XK_u,spawn,SHCMD("import my-stuff/Pictures/snips/$(date +'%F-%T').png")},
{A,-1,XK_p,spawn,SHCMD("pcmanfm")},
{A|C,-1,XK_m,spawn,SHCMD("multimc")},
{A|M|C,-1,XK_l,spawn,SHCMD("slock")},
{M,-1,XK_g,spawn,SHCMD("xmenu.sh -p 0x0")},
{A,-1,XK_r,spawndefault,{0}},
{A|S,-1,XK_Return,spawn,SHCMD("dmenu_run_history -l 5 -g 10 -p 'Run'")},
{A,-1,XK_c,spawn,SHCMD("volume-script")},
{A|C,-1,XK_Return,spawn,SHCMD("Booky 'emacsclient -c -a emacs' '><' 'Cconfig'")},
{A|S,-1,XK_w,spawn,SHCMD("Booky 'firefox' '_' 'Bconfig'")},
{A,-1,XK_z,spawn,SHCMD("music-changer cmus")},
{A|S,XK_d,XK_s,spawn,SHCMD("switch")},
{A|S,XK_d,XK_e,spawn,SHCMD("emoji-script")},
{A|S,XK_d,XK_c,spawn,SHCMD("calc")},
{A|S,XK_d,XK_p,spawn,SHCMD("passmenu2 -F -p 'Passwords'")},
{A|S,XK_d,XK_v,spawn,SHCMD("manview")},
{A|S,XK_d,XK_q,spawn,SHCMD("shut")},
{0,-1,XF86XK_AudioPrev,spawn,SHCMD("playerctl --player cmus previous")},
{0,-1,XF86XK_AudioNext,spawn,SHCMD("playerctl --player cmus next")},
{0,-1,XF86XK_AudioPlay,spawn,SHCMD("playerctl --player cmus play-pause")},
{0,-1,XF86XK_AudioLowerVolume,spawn,SHCMD("pamixer --allow-boost -d 1 ; killall dwmStatus ; dwmStatus &")},
{0,-1,XF86XK_AudioRaiseVolume,spawn,SHCMD("pamixer --allow-boost -i 1 ; killall dwmStatus ; dwmStatus &")},
{A,-1,XK_q,killclient,{0}},
{A|C|S,-1,XK_x,killpermanent,{0}},
{A|S,-1,XK_q,killunsel,{0}},
{M,-1,XK_v,togglevacant,{0}},
{A|C,-1,XK_v,toggletopbar,{0}},
{M|S,-1,XK_v,togglepadding,{0}},
{A,-1,XK_n,togglebar,{0}},
{A|S,-1,XK_h,setmfact,{ .f = -0.05 }},
{A|S,-1,XK_l,setmfact,{ .f = +0.05 }},
{M|C,-1,XK_u,setmfact,{ .f = mfact + 1 }},
{A|S,-1,XK_j,setcfact,{ .f = +0.25 }},
{A|S,-1,XK_k,setcfact,{ .f = -0.25 }},
{M|C|S,-1,XK_u,setcfact,{0}},
{A,-1,XK_bracketleft,incnmaster,{ .i = +1 }},
{A,-1,XK_bracketright,incnmaster,{ .i = -1 }},
{M,-1,XK_space,focusmaster,{0}},
{A|C,-1,XK_space,switchcol,{0}},
{A,-1,XK_h,focusdir,{ .i = 0 }},
{A,-1,XK_l,focusdir,{ .i = 1 }},
{A,-1,XK_k,focusdir,{ .i = 2 }},
{A,-1,XK_j,focusdir,{ .i = 3 }},
{M|S,-1,XK_j,focusstack,{ .i = +1 }},
{M|S,-1,XK_k,focusstack,{ .i = -1 }},
{M|A,-1,XK_h,inplacerotate,{ .i = +2 }},
{M|A,-1,XK_l,inplacerotate,{ .i = -2 }},
{A,-1,XK_t,setlayout,{ .v = &layouts[0] }},
{A,-1,XK_v,setlayout,{ .v = &layouts[1] }},
{A|S,-1,XK_f,setlayout,{ .v = &layouts[2] }},
{A,-1,XK_d,setlayout,{ .v = &layouts[3] }},
{A,-1,XK_g,setlayout,{ .v = &layouts[4] }},
{A,-1,XK_b,setlayout,{ .v = &layouts[5] }},
{A|S,-1,XK_m,setlayout,{ .v = &layouts[6] }},
{A,-1,XK_m,setlayout,{ .v = &layouts[7] }},
{A|S,-1,XK_g,setlayout,{ .v = &layouts[8] }},
{A|S,-1,XK_t,tabmode,{-1}},
{A|C,-1,XK_i,cyclelayout,{ .i = -1 }},
{A|C,-1,XK_p,cyclelayout,{ .i = +1 }},
{A,-1,XK_Tab,goback,{0}},
{A|S,-1,XK_n,shiftviewclients,{ .i = +1 }},
{A|S,-1,XK_p,shiftviewclients,{ .i = -1 }},
{A|S,-1,XK_a,winview,{0}},
{A,-1,XK_semicolon,zoom,{0}},
{A|S,-1,XK_v,transfer,{0}},
{M|C,-1,XK_j,pushdown,{0}},
{M|C,-1,XK_k,pushup,{0}},
{A|C,-1,XK_r,togglefloating,{0}},
{A|S,-1,XK_space,unfloatvisible,{0}},
{A|S,-1,XK_s,togglesticky,{0}},
{A,-1,XK_f,togglefullscr,{0}},
{A|C,-1,XK_f,togglefakefullscreen,{0}},
{A,-1,XK_u,togglescratch,{ .v = scpclean }},
{A,-1,XK_i,togglescratch,{ .v = scpcmus }},
{A,-1,XK_y,togglescratch,{ .v = scpcal }},
{A|M,-1,XK_u,removescratch,{ .v = scpclean }},
{A|M,-1,XK_i,removescratch,{ .v = scpcmus }},
{A|M,-1,XK_y,removescratch,{ .v = scpcal }},
{A|S,-1,XK_u,setscratch,{ .v = scpclean }},
{A|S,-1,XK_i,setscratch,{ .v = scpcmus }},
{A|S,-1,XK_y,setscratch,{ .v = scpcal }},
{A,-1,XK_comma,focusmon,{ .i = -1 }},
{A,-1,XK_period,focusmon,{ .i = +1 }},
{A|S,-1,XK_comma,tagmon,{ .i = -1 }},
{A|S,-1,XK_period,tagmon,{ .i = +1 }},
{A|S,-1,XK_equal,incrgaps,{ .i = +1 }},
{A|S,-1,XK_minus,incrgaps,{ .i = -1 }},
{A|S,-1,XK_0,defaultgaps,{0}},
{A|C,-1,XK_0,togglegaps,{0}},
{A|C,-1,XK_equal,setborderpx,{ .i = +1 }},
{A|C,-1,XK_minus,setborderpx,{ .i = -1 }},
{M,-1,XK_0,setborderpx,{ .i = 0 }},
{M|S,-1,XK_Escape,quit,{0}},
{A|C|S,-1,XK_q,quit,{1}},

TAGKEYS(                XK_1,                                  0)
TAGKEYS(                XK_2,                                  1)
TAGKEYS(                XK_3,                                  2)
TAGKEYS(                XK_4,                                  3)
TAGKEYS(                XK_5,                                  4)
TAGKEYS(                XK_6,                                  5)
TAGKEYS(                XK_7,                                  6)
TAGKEYS(                XK_8,                                  7)
TAGKEYS(                XK_9,                                  8)};
#+end_src

* Mouse bindings
+ click can be
  - ClkLtSymbol
  - ClkTagBar
  - ClkTabBar
  - ClkNumSymbol
  - ClkStatusText
  - ClkClientWin
  - ClkRootWin
#+begin_src C
static Button buttons[] = {
    /* click                event mask      button          function        argument */
    { ClkLtSymbol,          0,              Button1,        setlayout,      { .v = &layouts[0] } },
    { ClkLtSymbol,          0,              Button3,        setlayout,      { .v = &layouts[6] } },
    { ClkLtSymbol,          S,              Button1,        cyclelayout,    { .i = +1 } },
    { ClkLtSymbol,          S,              Button3,        cyclelayout,    { .i = -1 } },
    { ClkTagBar,            0,              Button1,        view,           {0} },
    { ClkTagBar,            0,              Button3,        toggleview,     {0} },
    { ClkTagBar,            A,              Button1,        tag,            {0} },
    { ClkTagBar,            A,              Button3,        toggletag,      {0} },
    { ClkNumSymbol,         0,              Button1,        spawn,          SHCMD("xmenu.sh -p 0x0") },
    { ClkClientWin,         A,              Button1,        movemouse,      {0} },
    { ClkClientWin,         A,              Button2,        togglefloating, {0} },
    { ClkClientWin,         A,              Button3,        resizemouse,    {0} },
    { ClkTabBar,            0,              Button1,        focuswin,       {0} },
};
#+end_src
* dwmc
#+begin_src C
#include "dwmc.c"
static Signal signals[] = {
    /* signum           function */
    { "togglebar",      togglebar },
    { "togglevacant",   togglevacant },
    { "togglepadding",  togglepadding },
    { "focusmon",       focusmon },
    { "tagmon",         tagmon },
    { "quit",           quit },
    { "viewex",         viewex },
    { "toggleviewex",   toggleviewex },
    { "tagex",          tagex },
    { "tagwithex",      tagwithex },
    { "toggletagex",    toggletagex },
    { "setlayoutex",    setlayoutex },
};
#+end_src
